group_by(year, month) %>%
mutate(freq = `Total Quantity` / sum(`Total Quantity`))
df17N <- plasticN  %>%
filter(year == 2017) %>%
group_by(year, month) %>%
mutate(freq = `Total Quantity` / sum(`Total Quantity`))
df18N <- plasticN  %>%
filter(year == 2018) %>%
group_by(year, month) %>%
mutate(freq = `Total Quantity` / sum(`Total Quantity`))
df19N <- plasticN  %>%
filter(year == 2019) %>%
group_by(year, month) %>%
mutate(freq = `Total Quantity` / sum(`Total Quantity`))
dfTotN <- rbind(df11N, df12N, df13N, df14N, df15N, df16N, df17N, df18N, df19N)
# Chunk 25
# plot for observing the data
(time_plotfr2N <- ggplot(dfTotN, aes(x = year, y = freq, color=category, fill = category)) +
geom_smooth(method="lm", level=0.95) +
theme_bw() +
xlab("Years") +
ylab("relative frequency") +
ggtitle("portion of plastic") +
expand_limits(y=0) +
scale_y_continuous() +
scale_x_continuous()+
theme(legend.position="bottom")+
theme(legend.text = element_text(size=5, face="bold")))
# Chunk 26
#1/4/20
### MODELING with new categorisation
# create train and test set
n <- nrow(dfTotN)  # Number of observations
ntrain <- round(n*0.75)  # 75% for training set
set.seed(314)    # Set seed for reproducible results
tindex <- sample(n, ntrain)   # Create a random index
train_dfTotN <- dfTotN[tindex,]   # Create training set
test_dfTotN <- dfTotN[-tindex,]
# modelling for category "Cigarette related waste"
train_Cigrel <- train_dfTotN %>%
filter(category=="Cigarette related waste") %>%
group_by(year)
test_Cigrel <- test_dfTotN %>%
filter(category=="Cigarette related waste") %>%
group_by(year)
set.seed(1234)
train_Cigrel.modelN <- lm(freq ~ year, data = train_Cigrel)
summary(train_Cigrel.modelN)
print("PREDICTION")
pred_Cigrel <- predict(train_Cigrel.modelN, test_Cigrel)
summary(pred_Cigrel)
actuals_predsCigrel <- data.frame(cbind(actuals=test_Cigrel$freq, predicteds=pred_Cigrel))
head(actuals_predsCigrel)
correlation_accuracy <- cor(actuals_predsCigrel)
min_max_accuracy <- mean(apply(actuals_predsCigrel, 1, min) / apply(actuals_predsCigrel, 1, max))
mape <- mean(abs((actuals_predsCigrel$predicteds - actuals_predsCigrel$actuals))/actuals_predsCigrel$actuals)
correlation_accuracy
min_max_accuracy
mape
# Chunk 27
# modelling for category "Food related waste"
train_Foodrel <- train_dfTotN %>%
filter(category=="Food related waste") %>%
group_by(year)
test_Foodrel <- test_dfTotN %>%
filter(category=="Food related waste") %>%
group_by(year)
set.seed(1234)
train_Foodrel.modelN <- lm(freq ~ year, data = train_Foodrel)
summary(train_Foodrel.modelN)
print("PREDICTION")
pred_Foodrel <- predict(train_Foodrel.modelN, test_Foodrel)
summary(pred_Foodrel)
actuals_predsFoodrel <- data.frame(cbind(actuals=test_Foodrel$freq, predicteds=pred_Foodrel))
head(actuals_predsFoodrel)
correlation_accuracy <- cor(actuals_predsFoodrel)
min_max_accuracy <- mean(apply(actuals_predsFoodrel, 1, min) / apply(actuals_predsFoodrel, 1, max))
# => 53.73%, min_max accuracy
mape <- mean(abs((actuals_predsFoodrel$predicteds - actuals_predsFoodrel$actuals))/actuals_predsFoodrel$actuals)
correlation_accuracy
min_max_accuracy
mape
# modelling for category "Other"
train_Other <- train_dfTotN %>%
filter(category=="Other") %>%
group_by(year)
test_Other <- test_dfTotN %>%
filter(category=="Other") %>%
group_by(year)
set.seed(1234)
train_Other.modelN <- lm(freq ~ year, data = train_Other)
summary(train_Other.modelN)
print("PREDICTION")
pred_Other <- predict(train_Other.modelN, test_Other)
summary(pred_Other)
actuals_predsOther <- data.frame(cbind(actuals=test_Other$freq, predicteds=pred_Other))
head(actuals_predsOther)
correlation_accuracy <- cor(actuals_predsOther)  # 5.31%
min_max_accuracy <- mean(apply(actuals_predsOther, 1, min) / apply(actuals_predsOther, 1, max))
mape <- mean(abs((actuals_predsOther$predicteds - actuals_predsOther$actuals))/actuals_predsOther$actuals)
correlation_accuracy
min_max_accuracy
mape
# modelling for category "Plastic bags and Styrofoam packaging"
train_Plbag <- train_dfTotN %>%
filter(category=="Plastic bags and Styrofoam packaging") %>%
group_by(year)
test_Plbag <- test_dfTotN %>%
filter(category=="Plastic bags and Styrofoam packaging") %>%
group_by(year)
set.seed(1234)
train_Plbag.modelN <- lm(freq ~ year, data = train_Plbag)
summary(train_Plbag.modelN)
print("PREDICTION")
pred_Plbag <- predict(train_Plbag.modelN, test_Plbag)
summary(pred_Plbag)
actuals_predsPlbag <- data.frame(cbind(actuals=test_Plbag$freq, predicteds=pred_Plbag))
head(actuals_predsPlbag)
correlation_accuracy <- cor(actuals_predsPlbag)  # 5.31%
min_max_accuracy <- mean(apply(actuals_predsPlbag, 1, min) / apply(actuals_predsPlbag, 1, max))
mape <- mean(abs((actuals_predsPlbag$predicteds - actuals_predsPlbag$actuals))/actuals_predsPlbag$actuals)
correlation_accuracy
min_max_accuracy
mape
# modelling for category "Fragments"
train_Frag <- train_dfTotN %>%
filter(category=="Fragments") %>%
group_by(year)
test_Frag <- test_dfTotN %>%
filter(category=="Fragments") %>%
group_by(year)
set.seed(1234)
train_Frag.modelN <- lm(freq ~ year, data = train_Frag)
summary(train_Frag.modelN)
print("PREDICTION")
pred_Frag <- predict(train_Frag.modelN, test_Frag)
summary(pred_Frag)
actuals_predsFrag <- data.frame(cbind(actuals=test_Frag$freq, predicteds=pred_Frag))
head(actuals_predsFrag)
correlation_accuracy <- cor(actuals_predsFrag)  # 5.31%
min_max_accuracy <- mean(apply(actuals_predsFrag, 1, min) / apply(actuals_predsFrag, 1, max))
mape <- mean(abs((actuals_predsFrag$predicteds - actuals_predsFrag$actuals))/actuals_predsFrag$actuals)
correlation_accuracy
min_max_accuracy
mape
# Chunk 28
plastic_category <-(c("cigarette related waste", "food related waste","Fragments", "Other","Plastic bags and Styrofoam packaging" ))
slope_scores <- c(-0.05512,0.030425, 0.030950,-0.002428,-0.001151)
slope_interpretation <-c("downward", "upward", "upward", "relatively steady", "relatively steady")
p_value<-c("<0.05","<0.05","<0.05", ">0.05",">0.05")
corr_accuracy<-c(0.62, 0.35,0.48, 0.27,0.38)
min_max_Acc<-c(0.67,0.72,0.67, 0.65 ,0.67)
MAPE_scores<-c(0.99,0.91,0.54, 0.89, 0.43)
score_table <- data.frame(plastic_category, p_value,slope_scores, slope_interpretation, corr_accuracy,min_max_Acc, MAPE_scores)
score_table
# Chunk 29
require(openxlsx);
require(readxl)
library(stringr);library(data.table)
library(XLConnect)
library(xtable)
# Sheets names
fileName <- 'data/meetings.xlsx'
sheets <- readxl::excel_sheets(fileName)
#length(sheets)
# Read 1st sheet (you shouldn't have more than one sheet for this task)
# read sheet into dataframe, and rbind
dfs <- readWorksheet(loadWorkbook("data/meetings.xlsx"),sheet=1)
dfs$Date <-as.character(dfs$Date)
print(xtable(dfs,
caption = "Record of Team Meetings",
label = "tab:one",
table.placement = "",
# align changes subject to number of columns
align = "lllp{8cm}lllll"),include.rownames=FALSE,
caption.placement = "top")
# Chunk 30
require(openxlsx);
require(readxl)
library(stringr);library(data.table)
library(XLConnect)
library(xtable)
# Sheets names
fileName <- 'data/peers.xlsx'
sheets <- readxl::excel_sheets(fileName)
#length(sheets)
# Read 1st sheet (you shouldn't have more than one sheet for this task)
# read sheet into dataframe, and rbind
dfs <- readWorksheet(loadWorkbook("data/peers.xlsx"),sheet=1)
# convert fields into chars
dfs[, ] <- lapply(dfs[, ], as.character)
print(xtable(dfs,
caption = "Peer Assessment out of 100",
label = "tab:two",
table.placement = "",
# align changes subject to number of columns
align = "lllllll"),include.rownames=FALSE,
caption.placement = "top")
loadedNamespaces()
loadedNamespaces()
.rs.loadedPackageUpdates()
.GlobalEnv
environment()
loadedNamespaces()
loadedNamespaces() %>% sort()
data$Time[1:10] %>% day()
data$Time[1:10] %>% date()
data$LogID %>% unique()
data$LogID %>% unique() %>% nrow()
data$LogID %>% unique() %>% length()
data %>%
mutate(Date = date(Time)) %>%
group_by(Date) %>%
summarise(Observations = nrow())
data %>%
mutate(Date = date(Time)) %>%
group_by(Date) %>%
summarise(Observations = length(LogID))
data %>%
mutate(Date = date(Time)) %>%
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ggplot(x = Date, y = Observations) +
geom_line()
data %>%
mutate(Date = date(Time)) %>%
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ggplot(aes(x = Date, y = Observations)) +
geom_line()
lubridate::year()
lubridate::year(data$Time[1:10])
lubridate::as_date(as.integer(today()))
seq.Date(from = "2020/01/01", to = "2020/02/01")
seq.Date(from = as_date("2020/01/01"), to = as_date("2020/02/01"))
seq.Date(from = as_date("2020/01/01"), to = as_date("2020/02/01"), by = "day")
?full_seq()
full_seq(c(1, 2, 4, 5, 10), 1)
full_seq(c(as_date("2020/01/01"), as_date("2020/02/01")), period = 1)
full_seq(c(as_date("2020/01/01"), as_date("2020/02/01")), period = 1) %>% as_tibble()
data %>%
mutate(Date = date(Time)) %>%
full_join(as_tibble = Date = full_seq(c(min(Date), max(Date)), period = 1))
data %>%
mutate(Date = date(Time)) %>%
full_join(as_tibble(full_seq(c(min(Date), max(Date)), period = 1)))
data %>%
mutate(Date = date(Time)) %>%
full_join(as_tibble(full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)))
ata %>%
mutate(Date = date(Time)) %>%
full_join(as_tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = Date)
data %>%
mutate(Date = date(Time)) %>%
full_join(as_tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = Date)
as_tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1))
full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = Date)
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date")
data %>%
mutate(Date = date(Time)) %>%
anti_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date")
?replace_na
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date") %>% # Check for any missing days
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ungroup() %>%
mutate(Year = lubridate::year(Date)) %>%
group_by(Year) %>%
summarise(Average_Daily_Observations = mean(Observations)) %>%
ungroup() %>%
ggplot(aes(x = Date, y = Observations)) +
geom_line()
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date") %>% # Check for any missing days
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ungroup() %>%
mutate(Year = lubridate::year(Date)) %>%
group_by(Year) %>%
summarise(Average_Daily_Observations = mean(Observations)) %>%
ungroup() %>%
ggplot(aes(x = Date, y = Observations)) +
geom_line()
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date") %>% # Check for any missing days
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ungroup() %>%
mutate(Year = lubridate::year(Date)) %>%
group_by(Year) %>%
summarise(Average_Daily_Observations = mean(Observations)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Average_Daily_Observations)) +
geom_line()
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date") %>% # Check for any missing days
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ungroup() %>%
mutate(Year = lubridate::year(Date)) %>%
group_by(Year) %>%
summarise(Average_Daily_Observations = mean(Observations)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Average_Daily_Observations)) +
geom_col()
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date") %>% # Check for any missing days
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ungroup() %>%
mutate(Year = lubridate::year(Date)) %>%
group_by(Year) %>%
summarise(Average_Daily_Observations = mean(Observations)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Average_Daily_Observations)) +
geom_col() +
xlab("Year") +
ylab("Average Daily Observations")
data %>%
mutate(Date = date(Time)) %>%
full_join(tibble(Date = full_seq(c(min(date(data$Time)), max(date(data$Time))), period = 1)), by = "Date") %>% # Check for any missing days
group_by(Date) %>%
summarise(Observations = length(LogID)) %>%
ungroup() %>%
mutate(Year = lubridate::year(Date)) %>%
group_by(Year) %>%
summarise(Average_Daily_Observations = mean(Observations)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Average_Daily_Observations)) +
geom_col() +
xlab("Year") +
ylab("Average Daily Observations") +
scale_x_continuous(breaks = 2012:2019)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(totQuantity = sum(Quantity))
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(totQuantity = sum(Quantity)) %>% select(totQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(totQuantity = sum(Quantity)) %>% select(totQuantity) %>% distinct()
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
mutate(Proportion = Quantity/yearlyTotQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`) %>%
mutate(Quantity = sum(Quantity)) %>%
ungroup() %>%
mutate(Proportion = Quantity/yearlyTotQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`) %>%
mutate(Quantity = sum(Quantity)) %>%
ungroup() %>%
mutate(Proportion = Quantity/yearlyTotQuantity) %>% select(Quantity, yearlyTotQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)/yearlyTotQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`) %>%
mutate(Quantity = sum(Quantity)) %>%
summarise(Proportion = Quantity/yearlyTotQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`) %>%
mutate(Quantity = sum(Quantity)) %>%
mutate(Proportion = Quantity/yearlyTotQuantity) %>%
distinct()
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year) %>%
mutate(yearlyTotQuantity = sum(Quantity)) %>%
group_by(Year, `Material Description`, yearlyTotQuantity) %>%
summarise(Quantity = sum(Quantity)/yearlyTotQuantity)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Quantity, fill = `Material Description`)) +
geom_col()
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Quantity, fill = `Material Description`)) +
geom_col(position = "fill")
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Quantity, fill = `Material Description`)) +
geom_col(colour = "black", size = 0.2, position = "fill")
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Quantity, fill = `Material Description`)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
scale_fill_hue(l=50, c=150)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Quantity, fill = `Material Description`)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
scale_fill_hue(l=50, c=150) +
scale_x_continuous(breaks = 2012:2019)
data %>%
mutate(Year = lubridate::year(Time)) %>%
group_by(Year, `Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Quantity, fill = `Material Description`)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
scale_fill_hue(l=50, c=150) +
scale_x_continuous(breaks = 2012:2019) +
ylab("Proportion of Quantity")
#Histogram of observations: Total v Plastic
data %>%
mutate(Type = if_else(`Material Description` == "PLASTIC", "Plastic", "Other"),
months = floor_date(Time, 'month')) %>%
group_by(months, Type) %>%
summarize(`Number of observations` = n()) %>%
ggplot(aes(x = months, y = `Number of observations`, colour = Type)) +
geom_line() +
theme(legend.position = "bottom")
#Histogram of observations: Total v Plastic
data %>%
mutate(Type = if_else(`Material Description` == "PLASTIC", "Plastic", "Other"),
months = floor_date(Time, 'month')) %>%
group_by(months, Type) %>%
summarize(`Number of observations` = n()) %>%
ggplot(aes(x = months, y = `Number of observations`, colour = Type)) +
geom_line() +
theme(legend.position = "bottom") +
scale_color_discrete(palette(value = "Set1"))
#Histogram of observations: Total v Plastic
data %>%
mutate(Type = if_else(`Material Description` == "PLASTIC", "Plastic", "Other"),
months = floor_date(Time, 'month')) %>%
group_by(months, Type) %>%
summarize(`Number of observations` = n()) %>%
ggplot(aes(x = months, y = `Number of observations`, colour = Type)) +
geom_line() +
theme(legend.position = "bottom") +
scale_color_discrete(palette(values = "Set1"))
#Histogram of observations: Total v Plastic
data %>%
mutate(Type = if_else(`Material Description` == "PLASTIC", "Plastic", "Other"),
months = floor_date(Time, 'month')) %>%
group_by(months, Type) %>%
summarize(`Number of observations` = n()) %>%
ggplot(aes(x = months, y = `Number of observations`, colour = Type)) +
geom_line() +
theme(legend.position = "bottom") +
scale_color_discrete(palette(value = "Set1"))
data %>% filter(`Material Description` == "RUBBER")
data %>% filter(`Material Description` == "RUBBER") %>% count(lubridate::year(Time))
data %>% filter(`Material Description` == "RUBBER") %>% mutate(Year = lubridate::year(Time)) %>% summarise(TotQuantity = sum(Quantity))
data %>% filter(`Material Description` == "RUBBER") %>% mutate(Year = lubridate::year(Time)) %>% group_by(Year) = summarise(TotQuantity = sum(Quantity))
data %>% filter(`Material Description` == "RUBBER") %>% mutate(Year = lubridate::year(Time)) %>% group_by(Year) = summarise(TotQuantity = sum(Quantity))
data %>% filter(`Material Description` == "RUBBER") %>% mutate(Year = lubridate::year(Time)) %>% group_by(Year) %>%  summarise(TotQuantity = sum(Quantity))
data %>% filter(`Material Description` == "RUBBER") %>% select(Quantity) %>% arrange(Quantity)
data %>% filter(`Material Description` == "RUBBER") %>% select(Quantity) %>% arrange(desc(Quantity))
a <- data %>% filter(`Material Description` == "RUBBER") %>% select(Quantity) %>% arrange(desc(Quantity))
a[1]/sum(a)
data %>% filter(`Material Description` == "RUBBER") %>% select(Quantity) %>% sort()
a <- data %>% filter(`Material Description` == "RUBBER") %>% select(Quantity) %>% arrange(desc(Quantity))
a$Quantity[1]/sum(a$Quantity)
data %>% filter(`Material Description` == "RUBBER") %>% arrange(desc(Quantity)) %>% top_n(1)
data %>% filter(`Material Description` == "RUBBER") %>% top_n(n = 1, wt = Quantity)
data %>% filter(`Material Description` == "RUBBER") %>% top_n(n = 1, wt = Quantity) %>% View()
data %>% filter(`Material Description` == "RUBBER") %>% top_n(n = 1, wt = Quantity) %>% as.list()
588119
