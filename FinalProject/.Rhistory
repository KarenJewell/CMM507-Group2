data$ItemName <- factor(data$ItemName, plastic_ordered$ItemName)
data %>%
filter(`Material Description` == "PLASTIC") %>%
mutate(month = month(Time, label = TRUE),
year = as.integer(year(Time))) %>%
filter(year > 2010) %>%
group_by(month, year, ItemName) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
ggplot(aes(x = month, y = `Total Quantity`, fill = ItemName)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 2) +
scale_fill_hue(l=50, c=150) +
xlab("Month") +
ylab("Proportion of Items")
#scale_fill_viridis_d(option = "magma")
ggsave("plots/pastic_debris_plot.png", width = 40, height = 20, units = "cm")
data %>%
mutate(Type = if_else(`Material Description` == "PLASTIC", "Plastic", "Other"),
months = floor_date(Time, 'month')) %>%
group_by(months, Type) %>%
summarize(`Number of observations` = n()) %>%
ggplot(aes(x = months, y = `Number of observations`)) +
geom_area(aes(fill = Type))
# ggplot() +
# geom_histogram(aes(x = Time))
data %>%
mutate(year = year(Time)) %>%
filter(year > 2010, year < 2020) %>%
group_by(year) %>%
summarise(quan = sum(Quantity)) %>%
ggplot(aes(x = year, y = quan)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 2011:2019) +
xlab("Year") +
ylab("Quantity") +
ggtitle("Quantity of debris per year") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("plots/observations.png")
install.packages('hexbin')
if(x %in% c(8,14,15,16,18,19,21,20)) out = "Other"
install.packages('hexbin')
install.packages("hexbin")
install.packages("hexbin")
plastic %>%
mutate(month = month(Time, label = FALSE),
year = as.integer(year(Time))) %>%
#filter(year > 2010) %>%
group_by(month, year, category) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
#Recategorisation by year
ggplot(aes(x = month, y = `Total Quantity`, fill = category)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 3) +
scale_fill_viridis(discrete = TRUE, option = "plasma") +
xlab("Month") +
ylab("Proportion of Items") +
ggtitle("Rel. frequencies of observed plastic waste by category") +
scale_x_continuous(breaks = 1:12) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position="top") +
guides(fill=guide_legend(title="Category"))
# all cigarette related waste: 1, 4, 6, 22
# Food related waste: 3, 2,7,9,10, 17, 23, 11
# Non food related waste: 8, 14, 15, 16, 18, 19, 21, 20
# Plastic bags and Styrofoam packaging:12, 13
# Fragments: 5, 23, 24,25
recategorise <- function(x){
out = ""
if(x %in% c(1,4,6,22)){out = "Cigarette related waste"}
if(x %in% c(2,3,7,9,10,17,23,11)) out = "Food related waste"
if(x %in% c(8,14,15,16,18,19,21,20)) out = "Other"
if(x %in% c(12,13)) out = "Plastic bags and Styrofoam packaging"
if(x %in% c(5,23,24,25)) out = "Fragments"
if(out == "") stop(paste("Error in recategorise:", x))
return(out)
}
plastic_types <- data %>%
filter(`Material Description` == "PLASTIC") %>%
select(ItemName, ItemID) %>%
distinct() %>%
mutate(label = 1:n()) %>%
mutate(category = purrr::map(label, recategorise)) %>%
mutate(category = as_factor(as.character(category))) %>%
select(ItemID, category)
plastic <- data %>%
filter(`Material Description` == "PLASTIC") %>%
full_join(plastic_types, by = "ItemID")
plastic %>%
mutate(month = month(Time, label = FALSE),
year = as.integer(year(Time))) %>%
#filter(year > 2010) %>%
group_by(month, year, category) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
#Recategorisation by year
ggplot(aes(x = month, y = `Total Quantity`, fill = category)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 3) +
scale_fill_viridis(discrete = TRUE, option = "plasma") +
xlab("Month") +
ylab("Proportion of Items") +
ggtitle("Rel. frequencies of observed plastic waste by category") +
scale_x_continuous(breaks = 1:12) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position="top") +
guides(fill=guide_legend(title="Category"))
#ggsave("plots/pastic_debris_plot_recategorised.png", width = 40, height = 20, units = "cm")
# all cigarette related waste: 1, 4, 6, 22
# Food related waste: 3, 2,7,9,10, 17, 23, 11
# Non food related waste: 8, 14, 15, 16, 18, 19, 21, 20
# Plastic bags and Styrofoam packaging:12, 13
# Fragments: 5, 23, 24,25
recategorise <- function(x){
out = ""
if(x %in% c(1,4,6,22)){out = "Cigarette related waste"}
if(x %in% c(2,3,7,9,10,17,23,11)) out = "Food related waste"
if(x %in% c(8,14,15,16,18,19,21,20)) out = "Other"
if(x %in% c(12,13)) out = "Plastic bags and Styrofoam packaging"
if(x %in% c(5,23,24,25)) out = "Fragments"
if(out == "") stop(paste("Error in recategorise:", x))
return(out)
}
plastic_types <- data %>%
filter(`Material Description` == "PLASTIC") %>%
select(ItemName, ItemID) %>%
distinct() %>%
mutate(label = 1:n()) %>%
mutate(category = purrr::map(label, recategorise)) %>%
mutate(category = as_factor(as.character(category))) %>%
select(ItemID, category)
plastic <- data %>%
filter(`Material Description` == "PLASTIC") %>%
full_join(plastic_types, by = "ItemID")
plastic %>%
mutate(month = month(Time, label = FALSE),
year = as.integer(year(Time))) %>%
filter(year > 2010) %>%
group_by(month, year, category) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
#Recategorisation by year
ggplot(aes(x = month, y = `Total Quantity`, fill = category)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 3) +
scale_fill_viridis(discrete = TRUE, option = "plasma") +
xlab("Month") +
ylab("Proportion of Items") +
ggtitle("Rel. frequencies of observed plastic waste by category") +
scale_x_continuous(breaks = 1:12) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position="top") +
guides(fill=guide_legend(title="Category"))
#ggsave("plots/pastic_debris_plot_recategorised.png", width = 40, height = 20, units = "cm")
#Linechart quantity of debris per year
data %>%
mutate(year = year(Time)) %>%
filter(year > 2010, year < 2020) %>%
group_by(year) %>%
summarise(quan = sum(Quantity)) %>%
ggplot(aes(x = year, y = quan)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 2011:2019) +
xlab("Year") +
ylab("Quantity") +
ggtitle("Quantity of debris per year") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plastic_ordered <- data %>%
filter(`Material Description` == "PLASTIC") %>%
select(ItemName, Quantity) %>%
group_by(ItemName) %>%
summarise(Total = sum(Quantity)) %>%
arrange(desc(Total))
plastic_ordered <- data %>%
filter(`Material Description` == "PLASTIC") %>%
select(ItemName, Quantity) %>%
group_by(ItemName) %>%
summarise(Total = sum(Quantity)) %>%
arrange(desc(Total))
data$ItemName <- factor(data$ItemName, plastic_ordered$ItemName)
data %>%
filter(`Material Description` == "PLASTIC") %>%
mutate(month = month(Time, label = TRUE),
year = as.integer(year(Time))) %>%
filter(year > 2010) %>%
group_by(month, year, ItemName) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
ggplot(aes(x = month, y = `Total Quantity`, fill = ItemName)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 3) +
scale_fill_hue(l=50, c=150) +
xlab("Month") +
ylab("Proportion of Items") +
theme(legend.position="top")
#scale_fill_viridis_d(option = "magma")
#ggsave("plots/pastic_debris_plot.png", width = 40, height = 20, units = "cm")
#treemap of debris categories
#png("plots/treemap.png")
data %>%
select(`Material Description`, ItemName, Quantity) %>%
group_by(`Material Description`, ItemName) %>%
summarise(Quantity = sum(Quantity)) %>%
treemap(index = c("Material Description", "ItemName"),
vSize = "Quantity", draw = TRUE) -> tm
#tm
#dev.off()
#save.image(file = "plots/treemap.png")
#treemap of debris categories
#png("plots/treemap.png")
data %>%
select(`Material Description`, ItemName, Quantity) %>%
group_by(`Material Description`, ItemName) %>%
summarise(Quantity = sum(Quantity)) %>%
treemap(index = c("Material Description", "ItemName"),
vSize = "Quantity", draw = TRUE) -> tm
#tm
dev.off()
#save.image(file = "plots/treemap.png")
View(data)
#treemap of debris categories
#png("plots/treemap.png")
data %>%
select(`Material Description`, ItemName, Quantity) %>%
group_by(`Material Description`, ItemName) %>%
summarise(Quantity = sum(Quantity)) %>%
treemap(index = c("Material Description", "ItemName"),
vSize = "Quantity", draw = TRUE) -> tm
#tm
dev.off()
#save.image(file = "plots/treemap.png")
#treemap of debris categories
#png("plots/treemap.png")
data %>%
select(`Material Description`, ItemName, Quantity) %>%
group_by(`Material Description`, ItemName) %>%
summarise(Quantity = sum(Quantity)) %>%
treemap(index = c("Material Description", "ItemName"),
vSize = "Quantity", draw = TRUE) -> tm
#tm
#dev.off()
#save.image(file = "plots/treemap.png")
#treemap of debris categories
#png("plots/treemap.png")
data %>%
select(`Material Description`, ItemName, Quantity) %>%
group_by(`Material Description`, ItemName) %>%
summarise(Quantity = sum(Quantity)) %>%
treemap(index = c("Material Description", "ItemName"),
vSize = "Quantity", draw = TRUE) -> tm
#tm
#dev.off()
#save.image(file = "plots/treemap.png")
data %>% apply(2, function(x) length(unique(x)))
data %>% apply(2, function(x) length(unique(x)))
unique(data$Description)
#MissingValues
data %>% select_if(function(x) any(is.na(x))) %>% colnames()
#explicit missing value for the location factor
data$Location <- data$Location %>% fct_explicit_na()
# Chunk 1
library(tidyverse)
library(purrr)
library(magrittr)
library(treemap)
library(mapdata)
library(viridis)
library(lubridate)
library(imager)
data <- list.files(path = "data/debris/", full.names = TRUE) %>%
lapply(FUN = read_csv, col_types = "ififidddddcfcif") %>%
reduce(rbind)
# Chunk 2
# Data wrangling
#replace the column for time as a date data type, renaming it "Time"
data$Time <- data$Timestamp %>%
parse_datetime(format = "%Y%m%d%H%M%S")
data$Timestamp <- NULL
#MissingValues
data %>% select_if(function(x) any(is.na(x))) %>% colnames()
#explicit missing value for the location factor
data$Location <- data$Location %>% fct_explicit_na()
#Remove redundant data
#Both "ListID" and "ListName" don't give us any information, so we will remove them both.
data <- data %>% select(-ListID,-ListName)
# Chunk 3
data %>% apply(2, function(x) length(unique(x)))
# Chunk 4
data %>% select(`Material Description`, ItemName) %>%
distinct() %$%
table(ItemName) %>%
as_tibble() %>%
filter(n > 1)
# Chunk 5
data %>% select(`Material Description`, ItemName, Quantity) %>%
filter(ItemName == "Rubber Gloves") %>%
group_by(`Material Description`) %>%
summarise(Quantity = sum(Quantity))
# Chunk 6
data %>% select(`Material Description`, ItemName, Description) %>%
filter(ItemName == "Rubber Gloves", !is.na(Description))
# Chunk 7
plastic_ordered <- data %>%
filter(`Material Description` == "PLASTIC") %>%
select(ItemName, Quantity) %>%
group_by(ItemName) %>%
summarise(Total = sum(Quantity)) %>%
arrange(desc(Total))
data %>%
filter(`Material Description` == "PLASTIC") %>%
mutate(month = month(Time, label = TRUE),
year = as.integer(year(Time)),
ItemName = fct_infreq(ItemName)) %>%
filter(year > 2010) %>%
group_by(month, year, ItemName) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
ggplot(aes(x = month, y = `Total Quantity`, fill = ItemName)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 4) +
scale_fill_hue(l=50, c=150) +
xlab("Month") +
ylab("Proportion of Items") +
theme(legend.position="top")
#scale_fill_viridis_d(option = "magma")
#ggsave("plots/pastic_debris_plot.png", width = 40, height = 20, units = "cm")
# Chunk 8
# all cigarette related waste: 1, 4, 6, 22
# Food related waste: 3, 2,7,9,10, 17, 23, 11
# Non food related waste: 8, 14, 15, 16, 18, 19, 21, 20
# Plastic bags and Styrofoam packaging:12, 13
# Fragments: 5, 23, 24,25
recategorise <- function(x){
out = ""
if(x %in% c(1,4,6,22)){out = "Cigarette related waste"}
if(x %in% c(2,3,7,9,10,17,23,11)) out = "Food related waste"
if(x %in% c(8,14,15,16,18,19,21,20)) out = "Other"
if(x %in% c(12,13)) out = "Plastic bags and Styrofoam packaging"
if(x %in% c(5,23,24,25)) out = "Fragments"
if(out == "") stop(paste("Error in recategorise:", x))
return(out)
}
plastic_types <- data %>%
filter(`Material Description` == "PLASTIC") %>%
select(ItemName, ItemID) %>%
distinct() %>%
mutate(label = 1:n()) %>%
mutate(category = purrr::map(label, recategorise)) %>%
mutate(category = as_factor(as.character(category))) %>%
select(ItemID, category)
plastic <- data %>%
filter(`Material Description` == "PLASTIC") %>%
full_join(plastic_types, by = "ItemID")
plastic %>%
mutate(month = month(Time, label = FALSE),
year = as.integer(year(Time))) %>%
filter(year > 2010) %>%
group_by(month, year, category) %>%
summarise(`Total Quantity` = sum(Quantity)) %>%
#Recategorisation by year
ggplot(aes(x = month, y = `Total Quantity`, fill = category)) +
geom_col(colour = "black", size = 0.2, position = "fill") +
facet_wrap(~year, nrow = 4) +
scale_fill_viridis(discrete = TRUE, option = "plasma") +
xlab("Month") +
ylab("Proportion of Items") +
ggtitle("Rel. frequencies of observed plastic waste by category") +
scale_x_continuous(breaks = 1:12) +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position="top") +
guides(fill=guide_legend(title="Category"))
#ggsave("plots/pastic_debris_plot_recategorised.png", width = 40, height = 20, units = "cm")
# Chunk 9
#Linechart quantity of debris per year
data %>%
mutate(year = year(Time)) %>%
filter(year > 2010, year < 2020) %>%
group_by(year) %>%
summarise(quan = sum(Quantity)) %>%
ggplot(aes(x = year, y = quan)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 2011:2019) +
xlab("Year") +
ylab("Quantity") +
ggtitle("Quantity of debris per year") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#ggsave("plots/observations.png")
# Chunk 10
#Histogram of observations: Total v Plastic
data %>%
mutate(Type = if_else(`Material Description` == "PLASTIC", "Plastic", "Other"),
months = floor_date(Time, 'month')) %>%
group_by(months, Type) %>%
summarize(`Number of observations` = n()) %>%
ggplot(aes(x = months, y = `Number of observations`)) +
geom_area(aes(fill = Type))
# ggplot() +
# geom_histogram(aes(x = Time))
# Chunk 11
data %>% select(Quantity,Description,`Material Description`) %>%
group_by(`Material Description`) %>%
summarise(Quantity = sum(Quantity)) %>%
ggplot(aes(x = reorder(`Material Description`, Quantity), y = Quantity)) +
geom_col() +
ylab("Total recorded quantity") +
xlab("Material class") +
coord_flip()
# Chunk 13
#Boxplot of fireworks distribution by month (across all years)
data %>%
filter(`Material Description` == "PLASTIC",
ItemName %in% c("Fireworks"),
year(Time) >= 2012, year(Time) <= 2019) %>%
mutate(month = month(Time, label = TRUE),
year = as.integer(year(Time))) %>%
group_by(month, year) %>%
summarise(quantity = sum(Quantity)) %>%
ggplot() +
geom_boxplot(aes(x = month, y = quantity)) +
xlab("Month") +
ylab("Quantity") +
ggtitle("Firework debris 2012-2019")
#ggsave("plots/fireworks.png")
# Chunk 14
world <- map_data("world")
data %>%
select(Latitude, Longitude, Quantity, Location, `Material Description`) %>%
ggplot() +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group), fill = "grey", alpha = 0.5) +
geom_hex(aes(x = Longitude, y = Latitude), bins = 50) +
scale_fill_viridis(trans = "log", breaks = c(5, 50, 500, 5000, 50000)) +
theme_void() +
guides(fill=guide_legend(title="Observations"))
#ggsave("plots/map.png", width = 20, height = 10, units = "cm")
# Chunk 15
data %>%
select(Latitude, Longitude, Quantity, Location, `Material Description`) %>%
ggplot() +
geom_polygon(data = map_data("world"), aes(x = long, y = lat, group = group), fill = "grey", alpha = 0.5) +
geom_hex(aes(x = Longitude, y = Latitude, fill = stat(log(count))), bins = 50) +
scale_fill_viridis() +
theme_void()
# Chunk 16
#Scatterplot of long/lat positions
data %>%
mutate(Location = str_to_lower(Location)) %>%
filter(str_detect(Location, "united kingdom")) %>%
select(Latitude, Longitude) %>%
ggplot(aes(x = Latitude, y = Longitude)) +
geom_point(position = "jitter")
# Chunk 17
#columnchart of debris locations
topLocations <- data %>%
group_by(Location) %>%
summarise(sumQuantity = sum(Quantity)) %>%
arrange(desc(sumQuantity)) %>%
top_n(5,sumQuantity)
data %>%
filter(Location %in% topLocations$Location) %>%
group_by(Location, `Material Description`) %>%
summarise(sumQuantity = sum(Quantity)) %>%
arrange(desc(sumQuantity)) %>%
ggplot(aes(x = `Material Description`, y = sumQuantity, fill = Location)) +
geom_col() + theme(legend.position = 'top')
# Chunk 19
require(openxlsx);
require(readxl)
library(stringr);library(data.table)
library(XLConnect)
library(xtable)
# Sheets names
fileName <- 'data/meetings.xlsx'
sheets <- readxl::excel_sheets(fileName)
#length(sheets)
# Read 1st sheet (you shouldn't have more than one sheet for this task)
# read sheet into dataframe, and rbind
dfs <- readWorksheet(loadWorkbook("data/meetings.xlsx"),sheet=1)
dfs$Date <-as.character(dfs$Date)
print(xtable(dfs,
caption = "Record of Team Meetings",
label = "tab:one",
table.placement = "",
# align changes subject to number of columns
align = "lllp{8cm}lllll"),include.rownames=FALSE,
caption.placement = "top")
# Chunk 20
require(openxlsx);
require(readxl)
library(stringr);library(data.table)
library(XLConnect)
library(xtable)
# Sheets names
fileName <- 'data/peers.xlsx'
sheets <- readxl::excel_sheets(fileName)
#length(sheets)
# Read 1st sheet (you shouldn't have more than one sheet for this task)
# read sheet into dataframe, and rbind
dfs <- readWorksheet(loadWorkbook("data/peers.xlsx"),sheet=1)
# convert fields into chars
dfs[, ] <- lapply(dfs[, ], as.character)
print(xtable(dfs,
caption = "Peer Assessment out of 100",
label = "tab:two",
table.placement = "",
# align changes subject to number of columns
align = "lllllll"),include.rownames=FALSE,
caption.placement = "top")
